Literate programming

This is a comment.

#(ds,Factorial,(#(eq,1,X,1,(#(ml,X,#(Factorial,#(ad,X,-1)))))))
#(ss,Factorial,X)'

#(ds,BottlesOfBeer,(#(eq,1,X,(#(ps,No more bottles of beer on the wall.\n)),(#(ps,Bottle of beer\n),#(BottlesOfBeer,#(ad,X,-1))))))
#(ss,BottlesOfBeer,X)'

Define a newline as a no-op.

#(ds,
,)'

Loop "macro," takes two ints (start & end) and a string to execute each iteration.
(In this macro, string func is not told what the iteration idx is; would need an arg input.)

#(ds,Loop,
(#(eq,I,#(ad,E,1),,
(#(S)
#(Loop,#(ad,I,1),E,(S))))))
#(ss,Loop,I,E,S)'

#(Loop,
1,
5,
(#(ps,looping
)))'



How to define lists?

TODO: make this eq function recursive, perhaps using Loop

#(ds,mylist,(#(eq,IDX,0,foo,(#(eq,IDX,1,bar,)))))'
#(ss,mylist,IDX)'
#(ps,#(cl,mylist,3))'


#(ps,\n)'

#(ds,Help,
This is the help text...

\#\(debug\,on\) \#\(debug\,off\)

\#\(cm\) - change the metachar

\#\(toc\) - print defined strings (table of contents)

\#\(rs\) - read a string from stdin

\#\(rc\) - read a character from stdin

\#\(ps\) - print a string

\#\(ds\) - define a string

\#\(ss\) - segment a string so it may be called with args

\#\(cl\) - call a string

\#\(eq\) - check equality

\#\(ad\) - add

\#\(ml\) - multiply

)'

Another comment.

Change metachar to newline; the code will activate readline library for this case, thus allowing history, etc.

